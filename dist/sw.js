const CACHE_NAME="story-app-cache-v2",API_CACHE_NAME="story-api-cache-v1",FILES_TO_CACHE=["/Sapa-STORIA/","/Sapa-STORIA/index.html","/Sapa-STORIA/main.css","/Sapa-STORIA/bundle.js","/Sapa-STORIA/S.ico","/Sapa-STORIA/manifest.json","/Sapa-STORIA/ScreenshotDesktop.png","/Sapa-STORIA/ScreenshotMobile.png","/Sapa-STORIA/S-96.png","/Sapa-STORIA/S-192.png","/Sapa-STORIA/S-512.png"],API_ENDPOINTS=[/^https:\/\/story-api\.dicoding\.dev\/v1\/stories(\?.*)?$/];async function fetchAndCache(t,e){try{const a=await fetch(t);if(a.ok){const n=await caches.open(e);await n.put(t,a.clone())}return a}catch(e){const a=await caches.match(t);if(a)return a;throw e}}self.addEventListener("install",(t=>{t.waitUntil(caches.open(CACHE_NAME).then((t=>(console.log("Opened cache"),t.addAll(FILES_TO_CACHE)))).catch((t=>{console.error("Cache installation failed:",t)}))),self.skipWaiting()})),self.addEventListener("activate",(t=>{const e=[CACHE_NAME,API_CACHE_NAME];t.waitUntil(caches.keys().then((t=>Promise.all(t.map((t=>{if(!e.includes(t))return console.log("Deleting old cache:",t),caches.delete(t)})))))),self.clients.claim()})),self.addEventListener("fetch",(t=>{const e=t.request,a=new URL(e.url);"GET"===e.method&&(API_ENDPOINTS.some((t=>t.test(a.href)))?t.respondWith(fetchAndCache(e,API_CACHE_NAME).catch((()=>new Response(JSON.stringify({error:!0,message:"Anda sedang offline. Data mungkin tidak terbaru."}),{headers:{"Content-Type":"application/json"}})))):"navigate"!==e.mode?t.respondWith(caches.match(e).then((t=>t||fetchAndCache(e,CACHE_NAME)))):t.respondWith(fetch(e).then((t=>(caches.open(CACHE_NAME).then((a=>a.put(e,t.clone()))),t))).catch((()=>caches.match("/index.html")))))})),self.addEventListener("push",(t=>{const e="Story berhasil dibuat",a={body:"Anda telah membuat story baru.",icon:"/S.ico"};t.waitUntil((async()=>{try{let n;if(t.data)try{n=t.data.json?await t.data.json():JSON.parse(await t.data.text())}catch(t){console.error("Error parsing push data:",t),n={}}const i=n.title||e,o=(n.description&&n.description,{...a,...n.options||{}});return console.log("Showing notification with:",{title:i,options:o}),self.registration.showNotification(i,o)}catch(t){return console.error("Error in push handler:",t),self.registration.showNotification(e,a)}})())})),self.addEventListener("notificationclick",(t=>{t.notification.close();const e=t.notification.data?.url||"/";t.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((t=>t.length>0?t[0].focus():clients.openWindow(e))))})),self.addEventListener("sync",(t=>{"sync-stories"===t.tag&&console.log("Background sync triggered")}));